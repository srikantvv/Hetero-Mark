module &bs_opt_bc:1:0:$full:$large:$default;
extension "amd:gcn";
extension "IMAGE";
align(8) readonly_f32 &__math32_LOGE_TBL[258] = f32[](0F00000000, 0F00000000, 0F3bff0000, 0F3429ac41, 0F3c7e0000, 0F35a8b0fc, 0F3cbdc000, 0F368d83ea, 0F3cfc1000, 0F361b0e78, 0F3d1cf000, 0F3687b9fe, 0F3d3ba000, 0F3631ec65, 0F3d5a1000, 0F36dd7119, 0F3d785000, 0F35c30045, 0F3d8b2000, 0F379b7751, 0F3d9a0000, 0F37ebcb0d, 0F3da8d000, 0F37839f83, 0F3db78000, 0F37528ae5, 0F3dc61000, 0F37a2eb18, 0F3dd49000, 0F36da7495, 0F3de2f000, 0F36a91eb7, 0F3df13000, 0F3783b715, 0F3dff6000, 0F371131db, 0F3e06b000, 0F383f3e68, 0F3e0db000, 0F38156a97, 0F3e14a000, 0F38297c0f, 0F3e1b8000, 0F387e100f, 0F3e226000, 0F3815b665, 0F3e293000, 0F37e5e3a1, 0F3e2ff000, 0F38183853, 0F3e36b000, 0F35fe719d, 0F3e3d5000, 0F38448108, 0F3e43f000, 0F38503290, 0F3e4a9000, 0F373539e8, 0F3e511000, 0F385e0ff1, 0F3e579000, 0F3864a740, 0F3e5e1000, 0F3786742d, 0F3e647000, 0F387be3cd, 0F3e6ae000, 0F3685ad3e, 0F3e713000, 0F3803b715, 0F3e778000, 0F37adcbdc, 0F3e7dc000, 0F380c36af, 0F3e820000, 0F371652d3, 0F3e851000, 0F38927139, 0F3e882000, 0F38c5fcd7, 0F3e8b3000, 0F38ae55d5, 0F3e8e4000, 0F3818c169, 0F3e914000, 0F38a0fde7, 0F3e944000, 0F38ad09ef, 0F3e974000, 0F3862bae1, 0F3e9a3000, 0F38eecd4c, 0F3e9d3000, 0F3798aad2, 0F3ea02000, 0F37421a1a, 0F3ea30000, 0F38c5e10e, 0F3ea5f000, 0F37bf2aee, 0F3ea8d000, 0F382d872d, 0F3eabb000, 0F37ee2e8a, 0F3eae8000, 0F38dedfac, 0F3eb16000, 0F3802f2b9, 0F3eb43000, 0F38481e9b, 0F3eb70000, 0F380eaa2b, 0F3eb9c000, 0F38ebfb5d, 0F3ebc9000, 0F38255fdd, 0F3ebf5000, 0F38783b82, 0F3ec21000, 0F3851da1e, 0F3ec4d000, 0F374e1b05, 0F3ec78000, 0F388f439b, 0F3eca3000, 0F38ca0e10, 0F3ecce000, 0F38cac08b, 0F3ecf9000, 0F3891f65f, 0F3ed24000, 0F378121cb, 0F3ed4e000, 0F386c9a9a, 0F3ed78000, 0F38949923, 0F3eda2000, 0F38777bcc, 0F3edcc000, 0F37b12d26, 0F3edf5000, 0F38a6ced3, 0F3ee1e000, 0F38ebd3e6, 0F3ee47000, 0F38fbe3cd, 0F3ee70000, 0F38d785c2, 0F3ee99000, 0F387e7e00, 0F3eec1000, 0F38f392c5, 0F3eeea000, 0F37d40983, 0F3ef12000, 0F38081a7c, 0F3ef3a000, 0F3784c3ad, 0F3ef61000, 0F38cce923, 0F3ef89000, 0F380f5faf, 0F3efb0000, 0F3891fd38, 0F3efd7000, 0F38ac47bc, 0F3effe000, 0F3897042b, 0F3f012000, 0F392952d2, 0F3f025000, 0F396fced4, 0F3f039000, 0F37f97073, 0F3f04c000, 0F385e9eae, 0F3f05f000, 0F3865c84a, 0F3f072000, 0F38130ba3, 0F3f084000, 0F3979cf16, 0F3f097000, 0F3938cac9, 0F3f0aa000, 0F38c3d2f4, 0F3f0bc000, 0F39755dec, 0F3f0cf000, 0F38e6b467, 0F3f0e1000, 0F395c0fb8, 0F3f0f4000, 0F383ebce0, 0F3f106000, 0F38dcd192, 0F3f118000, 0F39186bdf, 0F3f12a000, 0F392de74c, 0F3f13c000, 0F392f0944, 0F3f14e000, 0F391bff61, 0F3f160000, 0F38e9ed44, 0F3f172000, 0F38686dc8, 0F3f183000, 0F396b99a7, 0F3f195000, 0F39099c89, 0F3f1a7000, 0F37a27673, 0F3f1b8000, 0F390bdaa3, 0F3f1c9000, 0F397069ab, 0F3f1db000, 0F388449ff, 0F3f1ec000, 0F39013538, 0F3f1fd000, 0F392dc268, 0F3f20e000, 0F3947f423, 0F3f21f000, 0F394ff17c, 0F3f230000, 0F3945e10e, 0F3f241000, 0F3929e8f5, 0F3f252000, 0F38f85db0, 0F3f263000, 0F38735f99, 0F3f273000, 0F396c08db, 0F3f284000, 0F3909e600, 0F3f295000, 0F37b4996f, 0F3f2a5000, 0F391233cc, 0F3f2b5000, 0F397cead9, 0F3f2c6000, 0F38adb5cd, 0F3f2d6000, 0F3920261a, 0F3f2e6000, 0F3958ee36, 0F3f2f7000, 0F35aa4905, 0F3f307000, 0F37cbd11e, 0F3f317000, 0F3805fdf4);
readonly_f32 &__math32_LOG_INV_TBL[129] = f32[](0F40000000, 0F3ffe03f8, 0F3ffc0fc1, 0F3ffa232d, 0F3ff83e10, 0F3ff6603e, 0F3ff4898d, 0F3ff2b9d6, 0F3ff0f0f1, 0F3fef2eb7, 0F3fed7304, 0F3febbdb3, 0F3fea0ea1, 0F3fe865ac, 0F3fe6c2b4, 0F3fe52598, 0F3fe38e39, 0F3fe1fc78, 0F3fe07038, 0F3fdee95c, 0F3fdd67c9, 0F3fdbeb62, 0F3fda740e, 0F3fd901b2, 0F3fd79436, 0F3fd62b81, 0F3fd4c77b, 0F3fd3680d, 0F3fd20d21, 0F3fd0b6a0, 0F3fcf6475, 0F3fce168a, 0F3fcccccd, 0F3fcb8728, 0F3fca4588, 0F3fc907da, 0F3fc7ce0c, 0F3fc6980c, 0F3fc565c8, 0F3fc43730, 0F3fc30c31, 0F3fc1e4bc, 0F3fc0c0c1, 0F3fbfa030, 0F3fbe82fa, 0F3fbd6910, 0F3fbc5264, 0F3fbb3ee7, 0F3fba2e8c, 0F3fb92144, 0F3fb81703, 0F3fb70fbb, 0F3fb60b61, 0F3fb509e7, 0F3fb40b41, 0F3fb30f63, 0F3fb21643, 0F3fb11fd4, 0F3fb02c0b, 0F3faf3ade, 0F3fae4c41, 0F3fad602b, 0F3fac7692, 0F3fab8f6a, 0F3faaaaab, 0F3fa9c84a, 0F3fa8e83f, 0F3fa80a81, 0F3fa72f05, 0F3fa655c4, 0F3fa57eb5, 0F3fa4a9cf, 0F3fa3d70a, 0F3fa3065e, 0F3fa237c3, 0F3fa16b31, 0F3fa0a0a1, 0F3f9fd80a, 0F3f9f1166, 0F3f9e4cad, 0F3f9d89d9, 0F3f9cc8e1, 0F3f9c09c1, 0F3f9b4c70, 0F3f9a90e8, 0F3f99d723, 0F3f991f1a, 0F3f9868c8, 0F3f97b426, 0F3f97012e, 0F3f964fda, 0F3f95a025, 0F3f94f209, 0F3f944581, 0F3f939a86, 0F3f92f114, 0F3f924925, 0F3f91a2b4, 0F3f90fdbc, 0F3f905a38, 0F3f8fb824, 0F3f8f177a, 0F3f8e7835, 0F3f8dda52, 0F3f8d3dcb, 0F3f8ca29c, 0F3f8c08c1, 0F3f8b7034, 0F3f8ad8f3, 0F3f8a42f8, 0F3f89ae41, 0F3f891ac7, 0F3f888889, 0F3f87f781, 0F3f8767ab, 0F3f86d905, 0F3f864b8a, 0F3f85bf37, 0F3f853408, 0F3f84a9fa, 0F3f842108, 0F3f839930, 0F3f83126f, 0F3f828cc0, 0F3f820821, 0F3f81848e, 0F3f810204, 0F3f808081, 0F3f800000);

decl prog function &abort()();

prog kernel &__OpenCL_blackscholes_kernel(
	kernarg_u64 %__global_offset_0,
	kernarg_u64 %__global_offset_1,
	kernarg_u64 %__global_offset_2,
	kernarg_u64 %__printf_buffer,
	kernarg_u64 %__vqueue_pointer,
	kernarg_u64 %__aqlwrap_pointer,
	kernarg_u64 %rand_array,
	kernarg_u64 %d_call_price_,
	kernarg_u64 %d_put_price_,
	kernarg_u64 %locPtr,
	kernarg_u64 %sigAddr)
{
	pragma "AMD RTI", "ARGSTART:__OpenCL_blackscholes_kernel";
	pragma "AMD RTI", "version:3:1:104";
	pragma "AMD RTI", "device:generic";
	pragma "AMD RTI", "uniqueid:1025";
	pragma "AMD RTI", "memory:private:0";
	pragma "AMD RTI", "memory:region:0";
	pragma "AMD RTI", "memory:local:0";
	pragma "AMD RTI", "value:__global_offset_0:u64:1:1:0";
	pragma "AMD RTI", "value:__global_offset_1:u64:1:1:16";
	pragma "AMD RTI", "value:__global_offset_2:u64:1:1:32";
	pragma "AMD RTI", "pointer:__printf_buffer:u8:1:1:48:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "value:__vqueue_pointer:u64:1:1:64";
	pragma "AMD RTI", "value:__aqlwrap_pointer:u64:1:1:80";
	pragma "AMD RTI", "pointer:rand_array:float:1:1:96:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "pointer:d_call_price_:float:1:1:112:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "pointer:d_put_price_:float:1:1:128:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "pointer:locPtr:u32:1:1:144:uav:7:4:RW:1:0:0";
	pragma "AMD RTI", "value:sigAddr:u64:1:1:160";
	pragma "AMD RTI", "function:1:0";
	pragma "AMD RTI", "memory:64bitABI";
	pragma "AMD RTI", "privateid:8";
	pragma "AMD RTI", "enqueue_kernel:0";
	pragma "AMD RTI", "kernel_index:0";
	pragma "AMD RTI", "reflection:0:size_t";
	pragma "AMD RTI", "reflection:1:size_t";
	pragma "AMD RTI", "reflection:2:size_t";
	pragma "AMD RTI", "reflection:3:size_t";
	pragma "AMD RTI", "reflection:4:size_t";
	pragma "AMD RTI", "reflection:5:size_t";
	pragma "AMD RTI", "reflection:6:float*";
	pragma "AMD RTI", "reflection:7:float*";
	pragma "AMD RTI", "reflection:8:float*";
	pragma "AMD RTI", "reflection:9:int*";
	pragma "AMD RTI", "reflection:10:ulong";
	pragma "AMD RTI", "ARGEND:__OpenCL_blackscholes_kernel";

@__OpenCL_blackscholes_kernel_entry:
	// BB#0:
	workitemabsid_u32	$s0, 0;
	cvt_u64_u32	$d0, $s0;
	ld_kernarg_align(8)_width(all)_u64	$d1, [%__global_offset_0];
	add_u64	$d0, $d0, $d1;
	and_b64	$d1, $d0, 4294967295;
	shl_u64	$d1, $d1, 2;
	ld_kernarg_align(8)_width(all)_u64	$d2, [%rand_array];
	add_u64	$d2, $d2, $d1;
	ld_global_align(4)_f32	$s0, [$d2];
	cvt_ftz_f64_f32	$d3, $s0;
	mul_f64	$d4, $d3, 0D4024000000000000;
	sub_ftz_f32	$s0, 0F3f800000, $s0;
	cvt_ftz_f64_f32	$d2, $s0;
	mul_f64	$d5, $d2, 0D4059000000000000;
	add_f64	$d4, $d4, $d5;
	cvt_ftz_near_f32_f64	$s0, $d4;
	div_ftz_f32	$s5, $s0, $s0;
	mov_b32	$s6, $s5;
	or_b32	$s3, $s6, 1065353216;
	shr_u32	$s2, $s6, 23;
	add_u32	$s1, $s2, 4294967169;
	add_ftz_f32	$s3, $s3, 0Fbf800000;
	shr_u32	$s4, $s3, 23;
	add_u32	$s4, $s4, 4294967043;
	cmp_eq_b1_s32	$c0, $s2, 0;
	cmov_b32	$s11, $c0, $s3, $s6;
	cmov_b32	$s8, $c0, $s4, $s1;
	mul_f64	$d4, $d2, 0D4024000000000000;
	add_f64	$d4, $d3, $d4;
	cvt_ftz_near_f32_f64	$s1, $d4;
	mul_f64	$d3, $d3, 0D3f847ae147ae147b;
	mul_f64	$d4, $d2, 0D3fa999999999999a;
	add_f64	$d4, $d3, $d4;
	cvt_ftz_near_f32_f64	$s3, $d4;
	neg_f32	$s2, $s3;
	mul_ftz_f32	$s2, $s1, $s2;
	cmp_lt_ftz_b1_f32	$c0, $s2, 0F00000000;
	cmov_b32	$s7, $c0, 3204448256, 1056964608;
	class_b1_f32	$c0, $s2, 3;
	cvt_u32_b1	$s4, $c0;
	and_b32	$s4, $s4, 1;
	and_b32	$s13, $s11, 8323072;
	shl_u32	$s9, $s11, 1;
	add_ftz_f32	$s10, $s5, 0Fbf800000;
	and_b32	$s14, $s9, 65536;
	add_ftz_f32	$s12, $s10, 0F40000000;
	abs_f32	$s9, $s10;
	add_u32	$s13, $s14, $s13;
	shr_u32	$s14, $s13, 16;
	or_b32	$s13, $s13, 1056964608;
	cvt_u64_u32	$d5, $s14;
	and_b32	$s11, $s11, 8388607;
	or_b32	$s11, $s11, 1056964608;
	mov_b32	$s14, $s11;
	nrcp_f32	$s11, $s12;
	mul_ftz_f32	$s12, $s10, $s11;
	add_ftz_f32	$s11, $s12, $s12;
	shl_u64	$d4, $d5, 3;
	sub_ftz_f32	$s13, $s13, $s14;
	shl_u64	$d5, $d5, 2;
	ld_readonly_align(4)_f32	$s14, [&__math32_LOG_INV_TBL][$d5];
	cvt_near_f32_s32	$s8, $s8;
	mul_ftz_f32	$s15, $s11, $s11;
	nfma_f32	$s17, $s15, 0F3c4ccccd, 0F3daaaaab;
	mul_ftz_f32	$s13, $s14, $s13;
	mul_ftz_f32	$s14, $s13, $s13;
	nfma_f32	$s16, $s13, 0F3eaaaaab, 0F3f000000;
	nfma_f32	$s16, $s16, $s14, $s13;
	ld_v2_readonly_align(8)_f32	($s14, $s13), [&__math32_LOGE_TBL][$d4];
	nfma_f32	$s14, $s8, 0F3f317000, $s14;
	mul_ftz_f32	$s15, $s17, $s15;
	mul_ftz_f32	$s12, $s10, $s12;
	neg_f32	$s12, $s12;
	nfma_f32	$s11, $s11, $s15, $s12;
	add_ftz_f32	$s10, $s10, $s11;
	neg_f32	$s11, $s16;
	nfma_f32	$s8, $s8, 0F3805fdf4, $s11;
	add_ftz_f32	$s8, $s13, $s8;
	add_ftz_f32	$s8, $s14, $s8;
	cmp_lt_ftz_b1_f32	$c0, $s9, 0F3d800000;
	cmov_b32	$s9, $c0, $s10, $s8;
	and_b32	$s8, $s6, 2147483647;
	cmp_gt_b1_u32	$c0, $s8, 2139095039;
	cmov_b32	$s5, $c0, $s5, $s9;
	cmp_ne_b1_s32	$c0, $s6, $s8;
	cmov_b32	$s5, $c0, 2143289344, $s5;
	cmp_eq_b1_s32	$c0, $s8, 0;
	cmov_b32	$s5, $c0, 4286578688, $s5;
	nfma_f32	$s6, $s2, 0F3fb8aa3b, $s7;
	cvt_ftz_s32_f32	$s7, $s6;
	cvt_near_f32_s32	$s8, $s7;
	nfma_f32	$s6, $s8, 0Fbf317180, $s2;
	mul_ftz_f32	$s9, $s8, 0Fb717f7d1;
	add_ftz_f32	$s9, $s6, $s9;
	mul_ftz_f32	$s10, $s9, $s9;
	nfma_f32	$s11, $s10, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s11, $s10, $s11, 0F388ab355;
	nfma_f32	$s11, $s10, $s11, 0Fbb360b61;
	shl_u32	$s7, $s7, 23;
	nfma_f32	$s11, $s10, $s11, 0F3e2aaaab;
	mul_ftz_f32	$s8, $s8, 0F3717f7d1;
	neg_f32	$s11, $s11;
	nfma_f32	$s10, $s10, $s11, $s9;
	mul_ftz_f32	$s9, $s9, $s10;
	sub_ftz_f32	$s10, 0F40000000, $s10;
	nrcp_f32	$s10, $s10;
	mul_ftz_f32	$s9, $s10, $s9;
	sub_ftz_f32	$s8, $s8, $s9;
	sub_ftz_f32	$s6, $s8, $s6;
	sub_ftz_f32	$s6, 0F3f800000, $s6;
	add_u32	$s6, $s6, $s7;
	cmp_lt_ftz_b1_f32	$c0, $s2, 0Fc2aeac4f;
	cmov_b32	$s7, $c0, 0, $s6;
	mul_f64	$d2, $d2, 0D3fb999999999999a;
	add_f64	$d2, $d3, $d2;
	cvt_ftz_near_f32_f64	$s6, $d2;
	nsqrt_f32	$s8, $s1;
	mul_ftz_f32	$s8, $s6, $s8;
	mul_ftz_f32	$s6, $s6, $s6;
	mul_ftz_f32	$s6, $s6, 0F3f000000;
	add_ftz_f32	$s3, $s3, $s6;
	mul_ftz_f32	$s1, $s3, $s1;
	add_ftz_f32	$s1, $s1, $s5;
	div_ftz_f32	$s1, $s1, $s8;
	neg_f32	$s5, $s1;
	mul_ftz_f32	$s3, $s1, $s5;
	mul_ftz_f32	$s6, $s3, 0F3f000000;
	cmp_lt_ftz_b1_f32	$c0, $s6, 0F00000000;
	cmov_b32	$s12, $c0, 3204448256, 1056964608;
	cmp_lt_ftz_b1_f32	$c0, $s2, 0F42b17218;
	cmov_b32	$s13, $c0, $s7, 2139095040;
	sub_ftz_f32	$s3, $s1, $s8;
	neg_f32	$s7, $s3;
	mul_ftz_f32	$s8, $s3, $s7;
	mul_ftz_f32	$s8, $s8, 0F3f000000;
	cmp_lt_ftz_b1_f32	$c0, $s8, 0F00000000;
	cmov_b32	$s11, $c0, 3204448256, 1056964608;
	class_b1_f32	$c0, $s6, 3;
	cvt_u32_b1	$s9, $c0;
	and_b32	$s9, $s9, 1;
	class_b1_f32	$c0, $s8, 3;
	cvt_u32_b1	$s10, $c0;
	and_b32	$s10, $s10, 1;
	cvt_b1_u32	$c0, $s4;
	cmov_b32	$s2, $c0, $s2, $s13;
	nfma_f32	$s4, $s6, 0F3fb8aa3b, $s12;
	cvt_ftz_s32_f32	$s12, $s4;
	cvt_near_f32_s32	$s13, $s12;
	nfma_f32	$s4, $s13, 0Fbf317180, $s6;
	mul_ftz_f32	$s14, $s13, 0Fb717f7d1;
	add_ftz_f32	$s14, $s4, $s14;
	mul_ftz_f32	$s15, $s14, $s14;
	nfma_f32	$s16, $s15, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s16, $s15, $s16, 0F388ab355;
	nfma_f32	$s16, $s15, $s16, 0Fbb360b61;
	shl_u32	$s12, $s12, 23;
	nfma_f32	$s16, $s15, $s16, 0F3e2aaaab;
	mul_ftz_f32	$s13, $s13, 0F3717f7d1;
	neg_f32	$s16, $s16;
	nfma_f32	$s15, $s15, $s16, $s14;
	mul_ftz_f32	$s14, $s14, $s15;
	sub_ftz_f32	$s15, 0F40000000, $s15;
	nrcp_f32	$s15, $s15;
	mul_ftz_f32	$s14, $s15, $s14;
	sub_ftz_f32	$s13, $s13, $s14;
	sub_ftz_f32	$s4, $s13, $s4;
	sub_ftz_f32	$s4, 0F3f800000, $s4;
	add_u32	$s4, $s4, $s12;
	cmp_lt_ftz_b1_f32	$c0, $s6, 0Fc2aeac4f;
	cmov_b32	$s4, $c0, 0, $s4;
	cmp_lt_ftz_b1_f32	$c0, $s6, 0F42b17218;
	cmov_b32	$s4, $c0, $s4, 2139095040;
	nfma_f32	$s11, $s8, 0F3fb8aa3b, $s11;
	cvt_ftz_s32_f32	$s12, $s11;
	cvt_near_f32_s32	$s13, $s12;
	nfma_f32	$s11, $s13, 0Fbf317180, $s8;
	mul_ftz_f32	$s14, $s13, 0Fb717f7d1;
	add_ftz_f32	$s14, $s11, $s14;
	mul_ftz_f32	$s15, $s14, $s14;
	nfma_f32	$s16, $s15, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s16, $s15, $s16, 0F388ab355;
	nfma_f32	$s16, $s15, $s16, 0Fbb360b61;
	shl_u32	$s12, $s12, 23;
	nfma_f32	$s16, $s15, $s16, 0F3e2aaaab;
	mul_ftz_f32	$s13, $s13, 0F3717f7d1;
	neg_f32	$s16, $s16;
	nfma_f32	$s15, $s15, $s16, $s14;
	mul_ftz_f32	$s14, $s14, $s15;
	sub_ftz_f32	$s15, 0F40000000, $s15;
	nrcp_f32	$s15, $s15;
	mul_ftz_f32	$s14, $s15, $s14;
	sub_ftz_f32	$s13, $s13, $s14;
	sub_ftz_f32	$s11, $s13, $s11;
	sub_ftz_f32	$s11, 0F3f800000, $s11;
	add_u32	$s11, $s11, $s12;
	cmp_lt_ftz_b1_f32	$c0, $s8, 0Fc2aeac4f;
	cmov_b32	$s11, $c0, 0, $s11;
	cmp_lt_ftz_b1_f32	$c0, $s8, 0F42b17218;
	cmov_b32	$s11, $c0, $s11, 2139095040;
	cvt_b1_u32	$c0, $s10;
	cmov_b32	$s10, $c0, $s8, $s11;
	cvt_b1_u32	$c0, $s9;
	cmov_b32	$s8, $c0, $s6, $s4;
	abs_f32	$s4, $s7;
	mul_ftz_f32	$s4, $s4, 0F3e6d3389;
	add_ftz_f32	$s4, $s4, 0F3f800000;
	div_ftz_f32	$s4, 0F3f800000, $s4;
	mul_ftz_f32	$s6, $s4, 0F3faa466f;
	add_ftz_f32	$s6, $s6, 0Fbfe91eea;
	mul_ftz_f32	$s6, $s4, $s6;
	add_ftz_f32	$s6, $s6, 0F3fe40778;
	mul_ftz_f32	$s6, $s4, $s6;
	add_ftz_f32	$s6, $s6, 0Fbeb68f87;
	mul_ftz_f32	$s6, $s4, $s6;
	add_ftz_f32	$s7, $s6, 0F3ea385fa;
	mul_ftz_f32	$s6, $s10, 0F3ecc422a;
	mul_ftz_f32	$s4, $s4, $s6;
	mul_ftz_f32	$s4, $s4, $s7;
	sub_ftz_f32	$s4, 0F3f800000, $s4;
	sub_ftz_f32	$s7, 0F3f800000, $s4;
	cmp_gt_ftz_b1_f32	$c0, $s3, 0F80000000;
	cmov_b32	$s4, $c0, $s7, $s4;
	abs_f32	$s5, $s5;
	mul_ftz_f32	$s5, $s5, 0F3e6d3389;
	add_ftz_f32	$s5, $s5, 0F3f800000;
	div_ftz_f32	$s5, 0F3f800000, $s5;
	mul_ftz_f32	$s7, $s5, 0F3faa466f;
	add_ftz_f32	$s7, $s7, 0Fbfe91eea;
	mul_ftz_f32	$s7, $s5, $s7;
	add_ftz_f32	$s7, $s7, 0F3fe40778;
	mul_ftz_f32	$s7, $s5, $s7;
	add_ftz_f32	$s7, $s7, 0Fbeb68f87;
	mul_ftz_f32	$s7, $s5, $s7;
	add_ftz_f32	$s9, $s7, 0F3ea385fa;
	mul_ftz_f32	$s7, $s8, 0F3ecc422a;
	mul_ftz_f32	$s5, $s5, $s7;
	mul_ftz_f32	$s5, $s5, $s9;
	sub_ftz_f32	$s5, 0F3f800000, $s5;
	sub_ftz_f32	$s8, 0F3f800000, $s5;
	cmp_gt_ftz_b1_f32	$c0, $s1, 0F80000000;
	cmov_b32	$s5, $c0, $s8, $s5;
	abs_f32	$s8, $s3;
	mul_ftz_f32	$s8, $s8, 0F3e6d3389;
	add_ftz_f32	$s8, $s8, 0F3f800000;
	div_ftz_f32	$s8, 0F3f800000, $s8;
	mul_ftz_f32	$s9, $s8, 0F3faa466f;
	add_ftz_f32	$s9, $s9, 0Fbfe91eea;
	mul_ftz_f32	$s9, $s8, $s9;
	add_ftz_f32	$s9, $s9, 0F3fe40778;
	mul_ftz_f32	$s9, $s8, $s9;
	add_ftz_f32	$s9, $s9, 0Fbeb68f87;
	mul_ftz_f32	$s9, $s8, $s9;
	add_ftz_f32	$s9, $s9, 0F3ea385fa;
	mul_ftz_f32	$s6, $s8, $s6;
	mul_ftz_f32	$s6, $s6, $s9;
	sub_ftz_f32	$s6, 0F3f800000, $s6;
	sub_ftz_f32	$s8, 0F3f800000, $s6;
	cmp_lt_ftz_b1_f32	$c0, $s3, 0F00000000;
	cmov_b32	$s3, $c0, $s8, $s6;
	abs_f32	$s6, $s1;
	mul_ftz_f32	$s6, $s6, 0F3e6d3389;
	add_ftz_f32	$s6, $s6, 0F3f800000;
	div_ftz_f32	$s6, 0F3f800000, $s6;
	mul_ftz_f32	$s8, $s6, 0F3faa466f;
	add_ftz_f32	$s8, $s8, 0Fbfe91eea;
	mul_ftz_f32	$s8, $s6, $s8;
	add_ftz_f32	$s8, $s8, 0F3fe40778;
	mul_ftz_f32	$s8, $s6, $s8;
	add_ftz_f32	$s8, $s8, 0Fbeb68f87;
	mul_ftz_f32	$s8, $s6, $s8;
	add_ftz_f32	$s8, $s8, 0F3ea385fa;
	mul_ftz_f32	$s6, $s6, $s7;
	mul_ftz_f32	$s6, $s6, $s8;
	sub_ftz_f32	$s6, 0F3f800000, $s6;
	sub_ftz_f32	$s7, 0F3f800000, $s6;
	cmp_lt_ftz_b1_f32	$c0, $s1, 0F00000000;
	cmov_b32	$s8, $c0, $s7, $s6;
	ld_kernarg_align(8)_width(all)_u64	$d2, [%locPtr];
	gridsize_u32	$s1, 0;
	ld_kernarg_align(8)_width(all)_u64	$d3, [%d_call_price_];
	ld_kernarg_align(8)_width(all)_u64	$d4, [%d_put_price_];
	cvt_u32_u64	$s6, $d0;
	add_u64	$d0, $d4, $d1;
	add_u64	$d1, $d3, $d1;
	add_u32	$s7, $s1, 4294967295;
	mov_b32	$s9, 1;
	mul_ftz_f32	$s2, $s0, $s2;
	mul_ftz_f32	$s8, $s0, $s8;
	mul_ftz_f32	$s3, $s2, $s3;
	sub_ftz_f32	$s3, $s8, $s3;
	st_global_align(4)_f32	$s3, [$d1];
	mul_ftz_f32	$s0, $s0, $s5;
	mul_ftz_f32	$s2, $s2, $s4;
	sub_ftz_f32	$s0, $s2, $s0;
	st_global_align(4)_f32	$s0, [$d0];
	atomicnoret_add_global_scar_agent_s32	[$d2], $s9;
	cmp_ne_b1_s32	$c0, $s6, $s7;
	cbr_b1	$c0, @BB0_3;

@BB0_1:
	// %.preheader
	ld_global_align(4)_u32	$s0, [$d2];
	cmp_ne_b1_s32	$c0, $s0, $s1;
	cbr_b1	$c0, @BB0_1;
	// BB#2:
	ld_kernarg_align(8)_width(all)_u64	$d0, [%sigAddr];
	st_global_align(8)_u64	1, [$d0];

@BB0_3:
	ret;
};
