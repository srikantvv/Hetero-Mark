module &ga_opt_bc:1:0:$full:$large:$default;
extension "amd:gcn";
extension "IMAGE";

decl prog function &abort()();

prog kernel &__OpenCL_ga_cl12_kernel(
	kernarg_u64 %__global_offset_0,
	kernarg_u64 %__global_offset_1,
	kernarg_u64 %__global_offset_2,
	kernarg_u64 %__printf_buffer,
	kernarg_u64 %__vqueue_pointer,
	kernarg_u64 %__aqlwrap_pointer,
	kernarg_u64 %device_target,
	kernarg_u64 %device_query,
	kernarg_u64 %device_batch_result,
	kernarg_u32 %length,
	kernarg_u32 %query_sequence_length,
	kernarg_u32 %coarse_match_length,
	kernarg_u32 %coarse_match_threshold,
	kernarg_u32 %current_position,
	kernarg_u64 %locPtr,
	kernarg_u64 %sigAddr)
{
	pragma "AMD RTI", "ARGSTART:__OpenCL_ga_cl12_kernel";
	pragma "AMD RTI", "version:3:1:104";
	pragma "AMD RTI", "device:generic";
	pragma "AMD RTI", "uniqueid:1024";
	pragma "AMD RTI", "memory:private:0";
	pragma "AMD RTI", "memory:region:0";
	pragma "AMD RTI", "memory:local:0";
	pragma "AMD RTI", "value:__global_offset_0:u64:1:1:0";
	pragma "AMD RTI", "value:__global_offset_1:u64:1:1:16";
	pragma "AMD RTI", "value:__global_offset_2:u64:1:1:32";
	pragma "AMD RTI", "pointer:__printf_buffer:u8:1:1:48:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "value:__vqueue_pointer:u64:1:1:64";
	pragma "AMD RTI", "value:__aqlwrap_pointer:u64:1:1:80";
	pragma "AMD RTI", "pointer:device_target:u8:1:1:96:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "pointer:device_query:u8:1:1:112:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "pointer:device_batch_result:u8:1:1:128:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "value:length:u32:1:1:144";
	pragma "AMD RTI", "value:query_sequence_length:u32:1:1:160";
	pragma "AMD RTI", "value:coarse_match_length:u32:1:1:176";
	pragma "AMD RTI", "value:coarse_match_threshold:u32:1:1:192";
	pragma "AMD RTI", "value:current_position:u32:1:1:208";
	pragma "AMD RTI", "pointer:locPtr:u32:1:1:224:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "value:sigAddr:u64:1:1:240";
	pragma "AMD RTI", "function:1:0";
	pragma "AMD RTI", "memory:64bitABI";
	pragma "AMD RTI", "privateid:8";
	pragma "AMD RTI", "enqueue_kernel:0";
	pragma "AMD RTI", "kernel_index:0";
	pragma "AMD RTI", "reflection:0:size_t";
	pragma "AMD RTI", "reflection:1:size_t";
	pragma "AMD RTI", "reflection:2:size_t";
	pragma "AMD RTI", "reflection:3:size_t";
	pragma "AMD RTI", "reflection:4:size_t";
	pragma "AMD RTI", "reflection:5:size_t";
	pragma "AMD RTI", "reflection:6:char*";
	pragma "AMD RTI", "reflection:7:char*";
	pragma "AMD RTI", "reflection:8:char*";
	pragma "AMD RTI", "reflection:9:uint";
	pragma "AMD RTI", "reflection:10:int";
	pragma "AMD RTI", "reflection:11:int";
	pragma "AMD RTI", "reflection:12:int";
	pragma "AMD RTI", "reflection:13:int";
	pragma "AMD RTI", "reflection:14:int*";
	pragma "AMD RTI", "reflection:15:ulong";
	pragma "AMD RTI", "ARGEND:__OpenCL_ga_cl12_kernel";

@__OpenCL_ga_cl12_kernel_entry:
	// BB#0:
	workitemabsid_u32	$s0, 0;
	cvt_u64_u32	$d3, $s0;
	ld_kernarg_align(8)_width(all)_u64	$d4, [%__global_offset_0];
	ld_kernarg_align(8)_width(all)_u64	$d0, [%locPtr];
	ld_kernarg_align(4)_width(all)_u32	$s0, [%length];
	add_u64	$d1, $d3, $d4;
	cvt_u64_u32	$d2, $s0;
	cmp_gt_b1_u64	$c0, $d1, $d2;
	cbr_b1	$c0, @BB0_10;
	// BB#1:
	ld_kernarg_align(4)_width(all)_u32	$s0, [%coarse_match_threshold];
	ld_kernarg_align(4)_width(all)_u32	$s2, [%coarse_match_length];
	ld_kernarg_align(8)_width(all)_u64	$d2, [%device_query];
	ld_kernarg_align(8)_width(all)_u64	$d5, [%device_target];
	ld_kernarg_align(4)_width(all)_u32	$s1, [%query_sequence_length];
	ld_kernarg_align(4)_width(all)_u32	$s3, [%current_position];
	cvt_s64_s32	$d6, $s3;
	sub_u32	$s3, $s1, $s2;
	add_u64	$d4, $d4, $d6;
	add_u64	$d3, $d4, $d3;
	add_u64	$d3, $d5, $d3;
	mov_b32	$s1, 0;
	mov_b32	$s4, 1;
	mov_b32	$s5, $s1;

@BB0_2:
	cmp_le_b1_s32	$c0, $s5, $s3;
	cbr_b1	$c0, @BB0_3;
	br	@BB0_7;

@BB0_3:
	// %.preheader1
	cmp_lt_b1_s32	$c0, $s2, 1;
	mov_b64	$d4, $d3;
	mov_b32	$s7, $s5;
	mov_b32	$s8, $s2;
	mov_b32	$s6, $s1;
	cbr_b1	$c0, @BB0_5;

@BB0_4:
	// %.lr.ph
	cvt_s64_s32	$d5, $s7;
	add_u64	$d5, $d2, $d5;
	ld_global_s8	$s9, [$d5];
	ld_global_s8	$s10, [$d4];
	cmp_ne_b1_s32	$c0, $s10, $s9;
	cvt_u32_b1	$s9, $c0;
	add_u32	$s6, $s9, $s6;
	add_u64	$d4, $d4, 1;
	add_u32	$s7, $s7, 1;
	add_u32	$s8, $s8, 4294967295;
	cmp_ne_b1_s32	$c0, $s8, 0;
	cbr_b1	$c0, @BB0_4;

@BB0_5:
	// %._crit_edge
	add_u32	$s5, $s5, 1;
	cmp_ge_b1_s32	$c0, $s6, $s0;
	cbr_b1	$c0, @BB0_2;
	// BB#6:
	mov_b32	$s1, $s4;

@BB0_7:
	// %unified_loop_exit
	cmp_eq_b1_s32	$c0, $s1, 0;
	cbr_b1	$c0, @BB0_10;
	// BB#8:                                // %unified_loop_exit
	cmp_eq_b1_s32	$c0, $s1, 1;
	cbr_b1	$c0, @BB0_9;
	br	@BB0_10;

@BB0_9:
	ld_kernarg_align(8)_width(all)_u64	$d2, [%device_batch_result];
	add_u64	$d2, $d2, $d1;
	st_global_u8	1, [$d2];

@BB0_10:
	// %.critedge
	gridsize_u32	$s0, 0;
	mov_b32	$s1, 1;
	atomicnoret_add_global_scar_agent_s32	[$d0], $s1;
	add_u32	$s1, $s0, 4294967295;
	cvt_s64_s32	$d2, $s1;
	cmp_ne_b1_s64	$c0, $d1, $d2;
	cbr_b1	$c0, @BB0_13;

@BB0_11:
	// %.preheader
	ld_global_align(4)_u32	$s1, [$d0];
	cmp_ne_b1_s32	$c0, $s1, $s0;
	cbr_b1	$c0, @BB0_11;
	// BB#12:
	ld_kernarg_align(8)_width(all)_u64	$d0, [%sigAddr];
	st_global_align(8)_u64	1, [$d0];

@BB0_13:
	ret;
};
