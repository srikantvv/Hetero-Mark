module &pr_opt_bc:1:0:$full:$large:$default;
extension "amd:gcn";
extension "IMAGE";

decl prog function &abort()();

prog kernel &__OpenCL_PageRankUpdateGpu_kernel(
	kernarg_u64 %__global_offset_0,
	kernarg_u64 %__global_offset_1,
	kernarg_u64 %__global_offset_2,
	kernarg_u64 %__printf_buffer,
	kernarg_u64 %__vqueue_pointer,
	kernarg_u64 %__aqlwrap_pointer,
	kernarg_u32 %num_rows,
	kernarg_u64 %rowOffset,
	kernarg_u64 %col,
	kernarg_u64 %val,
	kernarg_u64 %vals,
	kernarg_u64 %x,
	kernarg_u64 %y,
	kernarg_u64 %locPtr,
	kernarg_u64 %sigAddr)
{
	pragma "AMD RTI", "ARGSTART:__OpenCL_PageRankUpdateGpu_kernel";
	pragma "AMD RTI", "version:3:1:104";
	pragma "AMD RTI", "device:generic";
	pragma "AMD RTI", "uniqueid:1024";
	pragma "AMD RTI", "memory:private:0";
	pragma "AMD RTI", "memory:region:0";
	pragma "AMD RTI", "memory:local:0";
	pragma "AMD RTI", "value:__global_offset_0:u64:1:1:0";
	pragma "AMD RTI", "value:__global_offset_1:u64:1:1:16";
	pragma "AMD RTI", "value:__global_offset_2:u64:1:1:32";
	pragma "AMD RTI", "pointer:__printf_buffer:u8:1:1:48:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "value:__vqueue_pointer:u64:1:1:64";
	pragma "AMD RTI", "value:__aqlwrap_pointer:u64:1:1:80";
	pragma "AMD RTI", "value:num_rows:u32:1:1:96";
	pragma "AMD RTI", "pointer:rowOffset:u32:1:1:112:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "pointer:col:u32:1:1:128:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "pointer:val:float:1:1:144:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "pointer:vals:float:1:1:160:l:7:4:RW:0:0:0";
	pragma "AMD RTI", "pointer:x:float:1:1:176:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "pointer:y:float:1:1:192:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "pointer:locPtr:u32:1:1:208:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "value:sigAddr:u64:1:1:224";
	pragma "AMD RTI", "function:1:0";
	pragma "AMD RTI", "memory:64bitABI";
	pragma "AMD RTI", "privateid:8";
	pragma "AMD RTI", "enqueue_kernel:0";
	pragma "AMD RTI", "kernel_index:0";
	pragma "AMD RTI", "reflection:0:size_t";
	pragma "AMD RTI", "reflection:1:size_t";
	pragma "AMD RTI", "reflection:2:size_t";
	pragma "AMD RTI", "reflection:3:size_t";
	pragma "AMD RTI", "reflection:4:size_t";
	pragma "AMD RTI", "reflection:5:size_t";
	pragma "AMD RTI", "reflection:6:uint";
	pragma "AMD RTI", "reflection:7:uint*";
	pragma "AMD RTI", "reflection:8:uint*";
	pragma "AMD RTI", "reflection:9:float*";
	pragma "AMD RTI", "reflection:10:float*";
	pragma "AMD RTI", "reflection:11:float*";
	pragma "AMD RTI", "reflection:12:float*";
	pragma "AMD RTI", "reflection:13:int*";
	pragma "AMD RTI", "reflection:14:ulong";
	pragma "AMD RTI", "ARGEND:__OpenCL_PageRankUpdateGpu_kernel";

@__OpenCL_PageRankUpdateGpu_kernel_entry:
	// BB#0:
	workitemabsid_u32	$s0, 0;
	cvt_u64_u32	$d4, $s0;
	ld_kernarg_align(8)_width(all)_u64	$d5, [%__global_offset_0];
	add_u64	$d0, $d4, $d5;
	cvt_u32_u64	$s0, $d0;
	shr_s32	$s1, $s0, 31;
	shr_u32	$s1, $s1, 26;
	ld_kernarg_align(8)_width(all)_u64	$d0, [%locPtr];
	add_u32	$s1, $s0, $s1;
	ld_kernarg_align(4)_width(all)_u32	$s3, [%num_rows];
	shr_s32	$s2, $s1, 6;
	cmp_ge_b1_u32	$c0, $s2, $s3;
	cbr_b1	$c0, @BB0_12;
	// BB#1:
	ld_kernarg_align(8)_width(all)_u64	$d1, [%y];
	and_b32	$s1, $s0, 63;
	ld_kernarg_align(8)_width(all)_u64	$d3, [%x];
	ld_kernarg_align(8)_width(all)_u64	$d2, [%vals];
	ld_kernarg_align(8)_width(all)_u64	$d6, [%rowOffset];
	cvt_s64_s32	$d7, $s2;
	shl_u64	$d7, $d7, 2;
	add_u64	$d1, $d1, $d7;
	st_global_align(4)_u32	0, [$d1];
	add_u64	$d6, $d6, $d7;
	ld_v2_global_align(4)_u32	($s3, $s2), [$d6];
	workitemid_u32	$s4, 0;
	cvt_s64_s32	$d6, $s4;
	shl_u64	$d6, $d6, 2;
	add_u64	$d2, $d2, $d6;
	cvt_u32_u64	$s4, $d2;
	st_group_align(4)_u32	0, [$s4];
	add_u32	$s4, $s3, $s1;
	cmp_ge_b1_s32	$c0, $s4, $s2;
	cbr_b1	$c0, @BB0_2;
	// BB#3:                                // %.lr.ph.preheader
	ld_kernarg_align(8)_width(all)_u64	$d6, [%col];
	ld_kernarg_align(8)_width(all)_u64	$d7, [%val];
	add_u64	$d4, $d5, $d4;
	cvt_u32_u64	$s5, $d4;
	and_b32	$s5, $s5, 63;
	add_u32	$s3, $s3, $s5;
	cvt_s64_s32	$d4, $s3;
	mov_b32	$s3, 0;
	shl_u64	$d5, $d4, 2;
	add_u64	$d4, $d7, $d5;
	add_u64	$d5, $d6, $d5;

@BB0_4:
	// %.lr.ph
	ld_global_align(4)_u32	$s5, [$d5];
	cvt_u64_u32	$d6, $s5;
	shl_u64	$d6, $d6, 2;
	add_u64	$d6, $d3, $d6;
	ld_global_align(4)_f32	$s6, [$d6];
	ld_global_align(4)_f32	$s7, [$d4];
	cvt_u32_u64	$s5, $d2;
	mul_ftz_f32	$s6, $s7, $s6;
	add_u64	$d4, $d4, 256;
	add_u64	$d5, $d5, 256;
	add_u32	$s4, $s4, 64;
	add_ftz_f32	$s3, $s3, $s6;
	st_group_align(4)_f32	$s3, [$s5];
	cmp_lt_b1_s32	$c0, $s4, $s2;
	cbr_b1	$c0, @BB0_4;
	br	@BB0_5;

@BB0_2:
	mov_b32	$s3, 0;

@BB0_5:
	// %._crit_edge
	cmp_gt_b1_u32	$c0, $s1, 31;
	cbr_b1	$c0, @BB0_12;
	// BB#6:
	cvt_u32_u64	$s4, $d2;
	cvt_u32_u64	$s2, $d2;
	ld_group_align(4)_f32	$s2, [$s2+128];
	add_ftz_f32	$s2, $s2, $s3;
	st_group_align(4)_f32	$s2, [$s4];
	cmp_gt_b1_u32	$c0, $s1, 15;
	cbr_b1	$c0, @BB0_12;
	// BB#7:
	cvt_u32_u64	$s3, $d2;
	cvt_u32_u64	$s4, $d2;
	ld_group_align(4)_f32	$s4, [$s4+64];
	add_ftz_f32	$s2, $s4, $s2;
	st_group_align(4)_f32	$s2, [$s3];
	cmp_gt_b1_u32	$c0, $s1, 7;
	cbr_b1	$c0, @BB0_12;
	// BB#8:                                // %.thread1
	cvt_u32_u64	$s3, $d2;
	cvt_u32_u64	$s4, $d2;
	ld_group_align(4)_f32	$s4, [$s4+32];
	add_ftz_f32	$s2, $s4, $s2;
	st_group_align(4)_f32	$s2, [$s3];
	cmp_gt_b1_u32	$c0, $s1, 3;
	cbr_b1	$c0, @BB0_12;
	// BB#9:
	cvt_u32_u64	$s3, $d2;
	cvt_u32_u64	$s4, $d2;
	ld_group_align(4)_f32	$s4, [$s4+16];
	add_ftz_f32	$s2, $s4, $s2;
	st_group_align(4)_f32	$s2, [$s3];
	cmp_gt_b1_u32	$c0, $s1, 1;
	cbr_b1	$c0, @BB0_12;
	// BB#10:                                // %.thread4
	cvt_u32_u64	$s3, $d2;
	cvt_u32_u64	$s4, $d2;
	ld_group_align(4)_f32	$s4, [$s4+8];
	add_ftz_f32	$s2, $s4, $s2;
	st_group_align(4)_f32	$s2, [$s3];
	cmp_ne_b1_s32	$c0, $s1, 0;
	cbr_b1	$c0, @BB0_12;
	// BB#11:
	cvt_u32_u64	$s1, $d2;
	cvt_u32_u64	$s3, $d2;
	ld_group_align(4)_f32	$s3, [$s3+4];
	add_ftz_f32	$s2, $s3, $s2;
	st_group_align(4)_f32	$s2, [$s1];
	ld_global_align(4)_f32	$s1, [$d1];
	add_ftz_f32	$s1, $s1, $s2;
	st_global_align(4)_f32	$s1, [$d1];

@BB0_12:
	// %.thread5
	mov_b32	$s1, 1;
	atomicnoret_add_global_scar_agent_s32	[$d0], $s1;
	gridsize_u32	$s1, 0;
	add_u32	$s2, $s1, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, $s2;
	cbr_b1	$c0, @BB0_16;
	// BB#13:                                // %.preheader

@BB0_14:
	ld_global_align(4)_width(all)_u32	$s0, [$d0];
	cmp_ne_b1_s32	$c0, $s0, $s1;
	cbr_b1	$c0, @BB0_14;
	// BB#15:
	ld_kernarg_align(8)_width(all)_u64	$d0, [%sigAddr];
	st_global_align(8)_u64	1, [$d0];

@BB0_16:
	ret;
};
